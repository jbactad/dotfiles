# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet ch "channel declaration" b
chan ${1:type}
endsnippet

snippet range.map "range map" b
for ${2:k,} ${3:v} := range ${1:map} {
	${0}
}
endsnippet

snippet range.arr "range array, slices" b
for ${2:i,} ${3:x} := range ${1:arr} {
	${0}	
}
endsnippet

snippet range.str "range interate over unicode points,not bytes" b
for ${2:i,} ${3:x} := range ${1:str} {
	${0}
}
endsnippet

snippet slice.av "Slice Append Vector" b
${1:arr} = append($1, ${2:vec})
endsnippet

snippet slice.copy "Slice Copy" b
${1:dest} := make([]${2:int}, len(${3:src}))
copy($1, $3)
endsnippet

snippet slice.cut "a = append(a[:i], a[j:]...)" b
${1:arr} = append($1[:${2:i}], $1[${3:j}:]...)
endsnippet

snippet lfv "log variable content" b
log.Printf("${1:var}: %#+v\\n", ${1})
endsnippet

snippet w "http ResponseWriter *Request" b
${1:w} http.ResponseWriter, ${2:r} *http.Request
endsnippet

snippet initf "init function" b
init(){
	${0}
}
endsnippet
